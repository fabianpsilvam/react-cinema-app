orbs:
    slack: circleci/slack@3.4.2
version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:13.14.0
    working_directory: ~/repo
  slack-executor:
    docker:
        - image: 'cibuilds/base:latest'
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore_cache
    restore_cache:
        keys:
          - app-{{ checksum "package.json" }}
          - app-
  - &install_dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save_cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}

jobs: 
  build:
    executor: app-executor
    steps:
        - checkout
        - *show-current-branch-name
        - *restore_cache
        - *install_dependencies
        - *save_cache
                
  linting:
    executor: app-executor
    steps:
        - checkout
        - *show-current-branch-name
        - *restore_cache
        - run:
            name: Run linting
            command: npm run lint

  prettier:
    executor: app-executor
    steps:
        - checkout
        - *show-current-branch-name
        - *restore_cache
        - run:
            name: Run linting
            command: npm run prettier:check

  deploy-to-aws-s3:
    docker:
        - image: circleci/node:13.14.0
    working_directory: ~/repo
    steps:
        - checkout
        - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
        - run:
                name: Installing AWS CLI
                command: |
                    sudo apt-get -y -qq update
                    sudo apt-get install -y awscli
                    sudo apt-get install -y python-pip python-dev build-essential
        - run:
                name: Build project
                command: |
                    npm install
                    npm run build
                    cd build
                    zip ../build.zip -r * .[^.]*
                    echo "Build successful"
        - run:
                name: Deploy to AWS S3
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]
                    then
                        aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_PROD_BUCKET} --delete
                    elif [ "${CIRCLE_BRANCH}" == "staging" ]
                    then
                        aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --delete
                    else
                        aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
                    fi
                    
  deploy-to-aws-cloudfront:
    docker:
        - image: circleci/node:13.14.0
    working_directory: ~/repo
    steps:
        - checkout
        - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
        - run:
                name: Installing AWS CLI
                command: |
                    sudo apt-get -y -qq update
                    sudo apt-get install -y awscli
                    sudo apt-get install -y python-pip python-dev build-essential
        - run:
                name: Build project
                command: |
                    npm install
                    npm run build
                    cd build
                    zip ../build.zip -r * .[^.]*
                    echo "Build successful"
        - run:
                name: Deploy to AWS Cloudfront
                command: |
                    aws configure set preview.cloudfront true
                    if [ "${CIRCLE_BRANCH}" == "master" ]
                    then
                        aws cloudfront create-invalidation --distribution-id ${PROD_DISTRIBUTION_ID} --paths /\*
                    elif [ "${CIRCLE_BRANCH}" == "staging" ]
                    then
                        aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
                    else
                        aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
                    fi
  notify_via_slack:
    executor: slack-executor
    steps:
        - slack/notify:
            message: "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete."
            webhook: $SLACK_WEBHOOK
        - slack/status:
            webhook: $SLACK_WEBHOOK


workflows:
    build_and_deploy:
        jobs:
            - build
            - linting:
                requires:
                    - build
                filters:
                    branches:
                        only:
                            - develop
                            - staging
                            - master
            - prettier:
                requires:
                    - build
                filters:
                    branches:
                        only:
                            - develop
                            - staging
                            - master
            - deploy-to-aws-s3:
                    requires:
                        - prettier
                    filters:
                        branches:
                            only:
                                - develop
                                - staging
                                - master
            - deploy-to-aws-cloudfront:
                    requires:
                        - deploy-to-aws-s3
                    filters:
                        branches:
                            only:
                                - develop
                                - staging
                                - master
            - notify_via_slack:
                requires:
                    - deploy-to-aws-cloudfront
                filters:
                    branches:
                        only:
                            - develop
                            - staging
                            - master